<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ci/cd on HimawariSunFlower&#39;s home</title>
    <link>http://HimawariSunFlower.github.io/categories/ci/cd/</link>
    <description>Recent content in ci/cd on HimawariSunFlower&#39;s home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="http://HimawariSunFlower.github.io/categories/ci/cd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gitlab ci/cd</title>
      <link>http://HimawariSunFlower.github.io/posts/cicd/</link>
      <pubDate>Tue, 11 Oct 2022 16:05:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/cicd/</guid>
      <description>官方文档
关于大仓模式微服务的ci/cd构建
cd应该针对master分支，也就是主分支代码提交时(发版时)才触发自动构建。 我们通常只想构建、测试和部署应用程序的那些已经更改的服务ーー而不是将所有服务放在一起，因为这可能非常耗时。使用only/change子句来实现。rule/changes应当是更好的实现。 根据gitlab官方的cicd实现，根目录的yml去include ci文件夹下的对应服务的yml文件，来实现一个大仓下多个服务的cicd。 todo 如何去发布到不同服务器？ 目前选用ansible 踩坑：
jobs config should contain at least one visible job https://gitlab.com/gitlab-org/gitlab/-/issues/341693 疑似已修复，gitlab15.2 请注意，GitLab Runner 的默认 pull policy 为 always，这意味着即使本地副本可用，runner 也会尝试从 GitLab 容器镜像库中提取 Docker 镜像。如果您更喜欢仅使用本地可用的 Docker 镜像，则可以在离线环境中将 GitLab Runner pull_policy 设置为 if-not-present。但是，如果不在离线环境中，我们建议将拉取策略设置保持为 always，因为这样可以在 CI/CD 流水线中使用更新的扫描程序。 runner默认使用always策略，无法通过配置文件修改 protoc-gen-go: error:inconsistent package import paths protoc-gen-go不存在报的这个错误，神秘 每一个构建都是隔离的，build protos这种指令应当放到before_script里让每个stage都触发生成 技巧
include template可以直接引用gitlab官方预制的一些模板，包括代码检查之类的。链接 gitlab提供了一批预定义变量. 链接 参考文档
微服务架构下CI/CD如何落地 大仓模式及其在gitlab ci/cd上的应用
gitlab自己的ci/cd yml文件</description>
    </item>
    
  </channel>
</rss>
