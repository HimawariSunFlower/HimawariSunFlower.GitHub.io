[{"categories":["golang","docker"],"content":"在我本机能运行的Dockerfile，在同事机器上build步骤会失败 Dockerfile: FROM golang:1.16 AS builder ARG APP_RELATIVE_PATH COPY . /src WORKDIR /src/app/${APP_RELATIVE_PATH} RUN GOPROXY=https://goproxy.cn make build FROM debian:stable-slim ARG APP_RELATIVE_PATH RUN apt-get update \u0026\u0026 apt-get install -y --no-install-recommends \\ ca-certificates \\ netbase \\ \u0026\u0026 rm -rf /var/lib/apt/lists/ \\ \u0026\u0026 apt-get autoremove -y \u0026\u0026 apt-get autoclean -y COPY --from=builder /src/app/${APP_RELATIVE_PATH}/bin /app WORKDIR /app EXPOSE 8000 EXPOSE 9000 VOLUME /data/conf CMD [\"./server\", \"-conf\", \"/data/conf\"] Makefile: .PHONY: build # build build: mkdir -p bin/ \u0026\u0026 go build -ldflags \"-X main.Version=$(VERSION)\" -o ./bin/ ./... 帮他排查问题,报错信息: =\u003e ERROR [builder 4/4] RUN GOPROXY=https://goproxy.cn make build 4.5s ------ \u003e [builder 4/4] RUN GOPROXY=https://goproxy.cn make build: #11 0.554 mkdir -p bin/ \u0026\u0026 go build -ldflags \"-X main.Version=42ad07a\" -o ./bin/ ./... #11 4.415 go: github.com/spf13/cast@v1.5.0 requires #11 4.415 github.com/frankban/quicktest@v1.14.3: missing go.sum entry; to add it: #11 4.415 go mod download github.com/frankban/quicktest #11 4.422 make: *** [../../../app_makefile:72: build] Error 1 ------ executor failed running [/bin/sh -c GOPROXY=https://goproxy.cn make build]: exit code: 2 make: *** [docker] Error 1 google一下，用go mod tidy解决 还是报错 看下go env goproxy，没有中国代理，加上之后 还是报错 陷入僵局了，将我本地的go mod，go sum copy 给他 还是报错 再googel一下，发现一个相关issue GOFLAGS=-mod=mod go generate ./... 再追踪进去issue go build -mod=mod 根据这个指令改动一下build cd ../../.. \u0026\u0026 docker build -mod=mod -f deploy/build/Dockerfile --build-arg APP_RELATIVE_PATH=$(APP_RELATIVE_PATH) -t $(DOCKER_IMAGE) . 成功了 确实是go1.16版本bug导致的 思考： -mod=mod 为什么能成功？ stackoverflow -mod=mod go尝试更新拉取gomod，看来只能定义成1.16的go mod tidy指令有bug 官方解释 : The go command starts by searching the build list for modules with paths that are prefixes of the package path. For example, if the package example.com/a/b is imported, and the module example.com/a is in the build list, the go command will check whether example.com/a contains the package, in the directory b. At least one file with the .go extension must be present in a directory for it to be considered a package. Build constraints are not applied for this purpose. If exactly one module in the build list provides the package, that module is used. If no modules provide the package or if two or more modules provide the package, the go command reports an error. The -mod=mod flag instructs the go command to attempt to find new modules providing missing packages and to update go.mod and go.sum. The go get and go mod tidy commands do this automatically. ","date":"2022-09-23","objectID":"/posts/go_sum/:0:0","tags":null,"title":"go1.16 docker build遇到的问题","uri":"/posts/go_sum/"},{"categories":["docker"],"content":"1.传进去的配置文件 如果是监听端口，应当是0.0.0.0 如果是外部服务，应当是对应ip，无法直接用0.0.0.0去连接宿主机 2.Dockerfile ","date":"2022-09-20","objectID":"/posts/doceker_1/:0:0","tags":null,"title":"docker 初体验","uri":"/posts/doceker_1/"},{"categories":["go-kratos"],"content":" repo层抽象优化问题 https://lailin.xyz/post/graceful-repo-code.html 关于repo层的接口优雅，抽象 kratos的biz层，data层不太能处理？ gorm这种具体orm不应当暴露给biz biz不能调用data会相互引用 暂时没有思考出好的方式 ddd相关及kratos版ddd相关 与dart客户端的grpc对接 返回error 他那边是try catch到再用grpcError类解析处理，等同于go的grpc包里的toRpcErr() rpc分类： ","date":"2022-09-19","objectID":"/posts/read_kratos_4/:0:0","tags":null,"title":"go-kratos 实际开发问题","uri":"/posts/read_kratos_4/"},{"categories":["gorm"],"content":" updates(\u0026struct{}),值为0不会跟新，需要updates(map)或者save()或者update() ","date":"2022-09-19","objectID":"/posts/gorm_1/:0:0","tags":null,"title":"gorm 遇到的问题","uri":"/posts/gorm_1/"},{"categories":["go-kratos"],"content":"服务发现 consul 基于name和id来区分不同注册 如果name或id相同，会互相覆盖 链路追踪 jaeger kratos的中间件通过[open-telemetry]集成数据再传递给jaeger Metrics open-telemetry + Grafana + Prometheus 都没有中文文档，otel的中文文档和没有一样T T ","date":"2022-09-13","objectID":"/posts/read_kratos_3/:0:0","tags":null,"title":"go-kratos 微服务必须的功能及第三方库","uri":"/posts/read_kratos_3/"},{"categories":["mac"],"content":"通用 Home键=Fn+左方向 End键=Fn+右方向 PageUP=Fn+上方向 PageDOWN=Fn+下方向 终端 tab 完整的目录或文件名称 tab+tab 显示可能的目录或文件名称补全列表 command+D 双屏 shift+command+D 取消双屏 control+A 到行首 control+E 到行尾 control+U 行删除 command+home 到顶部 command+end 到底部 command+pageup 上一页 command+pagedown 下一页 goland #部分是改建 command+z 撤消 control+T 重做 (撤消撤销) command+R 替换 shift+command+R 全局替换 command+f 搜索 shift+command+f 全局搜索 command+\u003c- 到行首 command+-\u003e 到行尾 shift+command+\u003c- 选中到行首 shift+command+-\u003e 选中到行尾 command+delete 行删除 option+command+l 格式化文件 trem pwd 当前路径 ps -ef | grep 进程名 查看进程号 sudo lsof -i :端口 查看端口被哪个进程监听 sudo lsof -nP -p 进程号 | grep LISTEN 查看进程监听的端口 sudo lsof -nP | grep LISTEN | grep 进程号 查看进程监听的端口 sudo lsof -nP | grep LISTEN | grep 端口号 查看监听端口的进程 ","date":"2022-09-13","objectID":"/posts/mac_1/:0:0","tags":null,"title":"mac常用快捷键","uri":"/posts/mac_1/"},{"categories":["go-kratos"],"content":" 错误如果不定义为kratos的错误类型，直接输出errors.error，会输出私有错误 { \"errors\": { \"internal\": [ \"error\" ] } } 无法显示具体信息，必须按规定的错误处理 ，定义生成pb文件之后包装一下 v1.ErrorParamError(\"jwt token missing\") v1.ErrorParamError(err.Error()) 尝试docker部署微服务，docker build 报错 failed to solve with frontend dockerfile.v0: failed to create LLB definition: unexpected status code [manifests stable-slim]: 403 Forbidden 设置 docker Engine =\u003e features:{buildkit:false} docker 里是不能用127.0.0.1访问宿主机的数据库的，需要配置里配宿主机ip root只能localhost访问，需要创建新用户, % 表示任意ip都能访问 dokerfile 里的make build执行的就是makefile里的build命令，需要改指向的cmd路径 可以用这个指令 docker run -it \u003cimage:version\u003e bash 去排查docker运行时的问题 casbin中间件 取不到req的mehod 只有ctx和一个interface的req Request Method func(handler middleware.Handler) middleware.Handler { return func(ctx context.Context, req interface{}) (interface{}, error) { tr, _ := transport.FromServerContext(ctx) htr := tr.(*http.Transport)//http是kratos transport里的子包 fmt.Println(htr.Request().Method, htr.Request().URL.Path) return nil, nil } }, goland新建项目，goget依赖成功但是一直飘红，外部库也没有实际添加 解决方法，goland添加goproxy ","date":"2022-09-05","objectID":"/posts/read_kratos_2/:0:0","tags":null,"title":"go-kratos 模仿beershop的微服务demo运行及遇到的问题","uri":"/posts/read_kratos_2/"},{"categories":["go-kratos"],"content":"#动手之前需要理清楚微服务逻辑 1.wire生成出来的wire_gen.go，goland同包读取不到，飘红。(实际编译成功了) :插件中卸载 go wire util 就好了 2.proto文件，import “google/api/annotations.proto” 等应用飘红。 :在goland设置的protobuf里添加third_party, belike: 3.项目结构 ├── Dockerfile ├── LICENSE ├── Makefile ├── README.md ├── api // 下面维护了微服务使用的proto文件以及根据它们所生成的go文件 │ └── helloworld │ └── v1 │ ├── error_reason.pb.go │ ├── error_reason.proto │ ├── error_reason.swagger.json │ ├── greeter.pb.go │ ├── greeter.proto │ ├── greeter.swagger.json │ ├── greeter_grpc.pb.go │ └── greeter_http.pb.go ├── cmd // 整个项目启动的入口文件 │ └── server │ ├── main.go │ ├── wire.go // 我们使用wire来维护依赖注入 │ └── wire_gen.go ├── configs // 这里通常维护一些本地调试用的样例配置文件 │ └── config.yaml ├── generate.go ├── go.mod ├── go.sum ├── internal // 该服务所有不对外暴露的代码，通常的业务逻辑都在这下面，使用internal避免错误引用 │ ├── biz // 业务逻辑的组装层，类似 DDD 的 domain 层，data 类似 DDD 的 repo，而 repo 接口 在这里定义，使用依赖倒置的原则。 │ │ ├── README.md │ │ ├── biz.go │ │ └── greeter.go │ ├── conf // 内部使用的config的结构定义，使用proto格式生成 │ │ ├── conf.pb.go │ │ └── conf.proto │ ├── data // 业务数据访问，包含 cache、db 等封装，实现了 biz 的 repo 接口。我们可能会把 data 与 dao 混淆在一起，data 偏重业务的含义，它所要做的是将领域对象重新拿出来，我们去掉了 DDD 的 infra层。 │ │ ├── README.md │ │ ├── data.go │ │ └── greeter.go │ ├── server // http和grpc实例的创建和配置 │ │ ├── grpc.go │ │ ├── http.go │ │ └── server.go │ └── service // 实现了 api 定义的服务层，类似 DDD 的 application 层，处理 DTO 到 biz 领域实体的 转换(DTO -\u003e DO)，同时协同各类 biz 交互，但是不应处理复杂逻辑 │ ├── README.md │ ├── greeter.go │ └── service.go └── third_party // api 依赖的第三方proto ├── README.md ├── google │ └── api │ ├── annotations.proto │ ├── http.proto │ └── httpbody.proto └── validate ├── README.md └── validate.proto 4.cmd下的main文件由wire依赖注入，需要理解wire 5.proto指令还可以生成service kratos proto server api/user/v1/user.proto -t internal/service 6.插件演示库 7.实战库 ","date":"2022-08-30","objectID":"/posts/read_kratos_1/:0:0","tags":null,"title":"go-kratos 初体验","uri":"/posts/read_kratos_1/"},{"categories":["git"],"content":"上传github报错 ssh: Could not resolve hostname github.com:HimawariSunFlower: nodename nor servname provided, or not known fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists 首先怀疑是公司gitlab账户覆盖掉github账户 ssh-add -l 确实没发现github的密钥 ssh -T git@github.com 是通的，ping不通 尝试方法1 hosts修改去可以ping通 ，没有用 尝试方法2 添加多个账户，添加到ssh-add ，没有用，方法2延伸问题，ssh passphrase忘记，mac钥匙串可以找回 最终解决方法 dns冲洗 #Other ways to flush your dns, in windows in your terminal ipconfig /flushdns #on macos dscacheutil -flushcache #on linux service nscd restart ","date":"2022-08-30","objectID":"/posts/first_post/:0:0","tags":null,"title":"上传github,ssh报错及解决方法","uri":"/posts/first_post/"}]