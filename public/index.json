[{"categories":null,"content":"微服务必须的功能及第三方库 服务发现 consul 基于name和id来区分不同注册 如果name或id相同，会互相覆盖 链路追踪 jaeger kratos的中间件通过[open-telemetry]集成数据再传递给jaeger Metrics open-telemetry + Grafana + Prometheus 都没有中文文档，otel的中文文档和没有一样T T ","date":"2022-09-13","objectID":"/posts/read_kratos_3/:0:0","tags":null,"title":"go-kratos 开发2","uri":"/posts/read_kratos_3/"},{"categories":null,"content":"通用 Home键=Fn+左方向 End键=Fn+右方向 PageUP=Fn+上方向 PageDOWN=Fn+下方向 终端 tab 完整的目录或文件名称 tab+tab 显示可能的目录或文件名称补全列表 command+D 双屏 shift+command+D 取消双屏 control+A 到行首 control+E 到行尾 control+U 行删除 command+home 到顶部 command+end 到底部 command+pageup 上一页 command+pagedown 下一页 goland #部分是改建 command+z 撤消 control+T 重做 (撤消撤销) command+R 替换 shift+command+R 全局替换 command+f 搜索 shift+command+f 全局搜索 command+\u003c- 到行首 command+-\u003e 到行尾 shift+command+\u003c- 选中到行首 shift+command+-\u003e 选中到行尾 command+delete 行删除 option+command+l 格式化文件 ","date":"2022-09-13","objectID":"/posts/mac_1/:0:0","tags":null,"title":"mac常用快捷键","uri":"/posts/mac_1/"},{"categories":null,"content":"模仿beershop的微服务demo运行及遇到的问题 错误如果不定义为kratos的错误类型，直接输出errors.error，会输出私有错误 { \"errors\": { \"internal\": [ \"error\" ] } } 无法显示具体信息，必须按规定的错误处理，定义生成pb文件之后包装一下 v1.ErrorParamError(\"jwt token missing\") v1.ErrorParamError(err.Error()) 尝试docker部署微服务，docker build 报错 failed to solve with frontend dockerfile.v0: failed to create LLB definition: unexpected status code [manifests stable-slim]: 403 Forbidden 设置 docker Engine =\u003e features:{buildkit:false} docker 里是不能用127.0.0.1访问宿主机的数据库的，需要配置里配宿主机ip root只能localhost访问，需要创建新用户, % 表示任意ip都能访问 dokerfile 里的make build执行的就是makefile里的build命令，需要改指向的cmd路径 可以用这个指令 docker run -it \u003cimage:version\u003e bash 去排查docker运行时的问题 casbin中间件 取不到req的mehod 只有ctx和一个interface的req Request Method func(handler middleware.Handler) middleware.Handler { return func(ctx context.Context, req interface{}) (interface{}, error) { tr, _ := transport.FromServerContext(ctx) htr := tr.(*http.Transport)//http是kratos transport里的子包 fmt.Println(htr.Request().Method, htr.Request().URL.Path) return nil, nil } }, goland新建项目，goget依赖成功但是一直飘红，外部库也没有实际添加 解决方法，goland添加goproxy ","date":"2022-09-05","objectID":"/posts/read_kratos_2/:0:0","tags":null,"title":"go-kratos 开发1","uri":"/posts/read_kratos_2/"},{"categories":null,"content":"#动手之前需要理清楚微服务逻辑 1.wire生成出来的wire_gen.go，goland同包读取不到，飘红。(实际编译成功了) :插件中卸载 go wire util 就好了 2.proto文件，import “google/api/annotations.proto” 等应用飘红。 :在goland设置的protobuf里添加third_party, belike: 3.项目结构 . ├── Dockerfile ├── LICENSE ├── Makefile ├── README.md ├── api // 下面维护了微服务使用的proto文件以及根据它们所生成的go文件 │ └── helloworld │ └── v1 │ ├── error_reason.pb.go │ ├── error_reason.proto │ ├── error_reason.swagger.json │ ├── greeter.pb.go │ ├── greeter.proto │ ├── greeter.swagger.json │ ├── greeter_grpc.pb.go │ └── greeter_http.pb.go ├── cmd // 整个项目启动的入口文件 │ └── server │ ├── main.go │ ├── wire.go // 我们使用wire来维护依赖注入 │ └── wire_gen.go ├── configs // 这里通常维护一些本地调试用的样例配置文件 │ └── config.yaml ├── generate.go ├── go.mod ├── go.sum ├── internal // 该服务所有不对外暴露的代码，通常的业务逻辑都在这下面，使用internal避免错误引用 │ ├── biz // 业务逻辑的组装层，类似 DDD 的 domain 层，data 类似 DDD 的 repo，而 repo 接口在这里定义，使用依赖倒置的原则。 │ │ ├── README.md │ │ ├── biz.go │ │ └── greeter.go │ ├── conf // 内部使用的config的结构定义，使用proto格式生成 │ │ ├── conf.pb.go │ │ └── conf.proto │ ├── data // 业务数据访问，包含 cache、db 等封装，实现了 biz 的 repo 接口。我们可能会把 data 与 dao 混淆在一起，data 偏重业务的含义，它所要做的是将领域对象重新拿出来，我们去掉了 DDD 的 infra层。 │ │ ├── README.md │ │ ├── data.go │ │ └── greeter.go │ ├── server // http和grpc实例的创建和配置 │ │ ├── grpc.go │ │ ├── http.go │ │ └── server.go │ └── service // 实现了 api 定义的服务层，类似 DDD 的 application 层，处理 DTO 到 biz 领域实体的转换(DTO -\u003e DO)，同时协同各类 biz 交互，但是不应处理复杂逻辑 │ ├── README.md │ ├── greeter.go │ └── service.go └── third_party // api 依赖的第三方proto ├── README.md ├── google │ └── api │ ├── annotations.proto │ ├── http.proto │ └── httpbody.proto └── validate ├── README.md └── validate.proto 4.cmd下的main文件由wire依赖注入，需要理解wire 5.proto指令还可以生成service kratos proto server api/user/v1/user.proto -t internal/service 6.插件演示库 7.实战库 ","date":"2022-08-30","objectID":"/posts/read_kratos_1/:0:0","tags":null,"title":"go-kratos初体验","uri":"/posts/read_kratos_1/"},{"categories":null,"content":"上传github报错 ssh: Could not resolve hostname github.com:HimawariSunFlower: nodename nor servname provided, or not known fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists 首先怀疑是公司gitlab账户覆盖掉github账户 ssh-add -l 确实没发现github的密钥 ssh -T git@github.com是通的，ping不通 尝试方法1 hosts修改去可以ping通，没有用 尝试方法2 添加多个账户，添加到ssh-add，没有用，方法2延伸问题，ssh passphrase忘记，mac钥匙串可以找回 最终解决方法 dns冲洗 #Other ways to flush your dns, in windows in your terminal ipconfig /flushdns #on macos dscacheutil -flushcache #on linux service nscd restart ","date":"2022-08-30","objectID":"/posts/first_post/:0:0","tags":null,"title":"上传github,ssh报错及解决方法","uri":"/posts/first_post/"}]