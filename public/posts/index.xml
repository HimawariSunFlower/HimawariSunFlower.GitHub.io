<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on HimawariSunFlower&#39;s home</title>
    <link>http://HimawariSunFlower.github.io/posts/</link>
    <description>Recent content in Posts on HimawariSunFlower&#39;s home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 13 Jan 2023 15:01:27 +0800</lastBuildDate><atom:link href="http://HimawariSunFlower.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>vue3基础手法指北之新手村篇</title>
      <link>http://HimawariSunFlower.github.io/posts/vue3%E5%9F%BA%E7%A1%80%E6%89%8B%E6%B3%95%E6%8C%87%E5%8C%97%E4%B9%8B%E6%96%B0%E6%89%8B%E6%9D%91%E7%AF%87/</link>
      <pubDate>Fri, 13 Jan 2023 15:01:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/vue3%E5%9F%BA%E7%A1%80%E6%89%8B%E6%B3%95%E6%8C%87%E5%8C%97%E4%B9%8B%E6%96%B0%E6%89%8B%E6%9D%91%E7%AF%87/</guid>
      <description>vue基础循环指北 1.1. 指令 1.2. 响应式 ref与reactive 1.3. 生命周期 第三方插件 2.1. 浏览器插件 vue.js devtools vue3基础手法指北之新手村篇 &amp;ndash; 市面上大火的游戏，虽然还不理解该游戏的设定但总之先从新手村出发
前置官方新手教程 传送门
1. vue基础循环指北 &amp;ndash; 村好剑
1.1. 指令 &amp;ndash; 这是火1-火4，这是冰1-冰4，好了，你该练gcd循环了
v-bind(:) 在模板中响应式的绑定attribute。 用处：可以用来动态改变style或其他值，比如配合v-for来设置select里option的key，value。 技能详情 v-model 在表单输入元素或组件上创建双向绑定。 用处：绑定后表单输入值就可以改变script定义的ref/reactive变量 技能详情 v-on(@) 给元素绑定事件监听器。 技能详情 v-if v-else v-else-if v-for v-show 不推荐同时使用v-if和v-for v-show通过display来实现v-if的效果，性能更有优势 v-text v-html v-solt v-once v-memo v-cloak v-pre 1.2. 响应式 ref与reactive &amp;ndash; 你要的是这个金斧头还是这个银斧头呢？
import { ref,reactive } from &#39;vue&#39; let state1 = reactive({ count: 0 }) let state2 = ref({ count: 0 }) //在ts中修改值 state1.</description>
    </item>
    
    <item>
      <title>使用vue3&#43;typescript实现与后端的grpc通信</title>
      <link>http://HimawariSunFlower.github.io/posts/ts-proto/</link>
      <pubDate>Fri, 16 Dec 2022 10:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/ts-proto/</guid>
      <description>使用vue3+typescript实现grpc, makefile:
NODE_BIN_PATH=./node_modules/.bin OUT_DIR=./src/proto ifeq ($(GOHOSTOS), windows) #the `find.exe` is different from `find` in bash/shell. #to see https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/find. #changed to use git-bash.exe to run find cli or other cli friendly, caused of every developer has a Git. Git_Bash= $(subst cmd\,bin\bash.exe,$(dir $(shell where git))) INTERNAL_PROTO_FILES=$(shell $(Git_Bash) -c &amp;quot;find app -name *.proto&amp;quot;) API_PROTO_FILES=$(shell $(Git_Bash) -c &#39;find proto -path proto/third_party -prune -o -name &amp;quot;*.proto&amp;quot; | grep -v &amp;quot;^proto/third_party&amp;quot;&#39;) else INTERNAL_PROTO_FILES=$(shell find app -name *.</description>
    </item>
    
    <item>
      <title>ent与图数据库</title>
      <link>http://HimawariSunFlower.github.io/posts/ent/</link>
      <pubDate>Fri, 28 Oct 2022 16:05:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/ent/</guid>
      <description> 参考资料 ent [什么是图数据库GDB]{https://help.aliyun.com/document_detail/102799.html} https://log.zvz.im/2020/06/21/go-ent-graph-based-orm/ GDB的优点 ent库本身不支持根据struct T创建数据库数据，但是可以根据template生成对应方法去打补丁实现。 2. docs </description>
    </item>
    
    <item>
      <title>gitlab ci/cd&#43;ansible 远程ssh服务器deploy遇到的问题</title>
      <link>http://HimawariSunFlower.github.io/posts/cicd_2/</link>
      <pubDate>Tue, 18 Oct 2022 16:05:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/cicd_2/</guid>
      <description> 调用本地sh文件需要权限 报错：/bin/bash: deploy.sh: Permission denied 解决：在yml调用sh前chmod777 deploy.sh gitlab变量默认只在受保护的分支上生效 报错：直接使用变量会找不到 解决：将对应分支设置为受保护 ansible连接远程服务器失败 报错： Unable to parse /Users/mac/root@host1 as an inventory source 解决：注意：如果传入的节点只有一台，末尾的逗号不能省略🔗 ansible all -i host161,host162 &amp;ndash;list-hosts ansible all -i host161, &amp;ndash;list-hosts ssh密钥认证失败 报错： root@hosts | UNREACHABLE! =&amp;gt; { &amp;#34;changed&amp;#34;: false, &amp;#34;msg&amp;#34;: &amp;#34;Failed to connect to the host via ssh: Host key verification failed.&amp;#34;, &amp;#34;unreachable&amp;#34;: true } 解决：需要参数 &amp;ndash;ssh-common-args=&amp;rsquo;-o StrictHostKeyChecking=no&#39; 总体belike：ansible &amp;ndash;ssh-common-args=&amp;rsquo;-o StrictHostKeyChecking=no&amp;rsquo; -i &amp;ldquo;$DEPLOY_TO_HOSTS&amp;rdquo;, &amp;ldquo;*&amp;rdquo; -m command -a &amp;rsquo;ls&#39; ansible 参考 新建文件夹，文件 用file模块 拷贝本机文件去远程服务器 用copy模块 command模块 不能使用&amp;gt;,&amp;lt;,cd等方法，可以使用shell模块 &amp;ldquo;nohup &amp;amp;&amp;rdquo; linux后台运行程序 </description>
    </item>
    
    <item>
      <title>微服务与单元测试</title>
      <link>http://HimawariSunFlower.github.io/posts/ut/</link>
      <pubDate>Wed, 12 Oct 2022 16:05:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/ut/</guid>
      <description>选用testify，goconvey来做单测。 选用mockery来根据go文件里的interface生成service的mockstruct mockery &amp;ndash;all 选用go-sqlmock来做sqlmock 使用go-sqlmock+gorm+mysql时，如果使用create，update等非原生方法，需要设置SkipInitializeWithVersion: true，关掉默认事务防止mock失败 直接mockrepo的单测方式，只是测试service层：
func TestConcurrentPost(t *testing.T) { Convey(&amp;#34;unit testing concurrent_post query service&amp;#34;, t, func() { logger := log.NewStdLogger(os.Stdout) repo := mocks.NewConcurrentPostRepo(t) repo.On(&amp;#34;QueryConcurrentPost&amp;#34;, mock.Anything, mock.AnythingOfType(&amp;#34;biz.Option&amp;#34;), mock.AnythingOfType(&amp;#34;biz.Option&amp;#34;)).Return(&amp;amp;biz.ConcurrentPost{UserId: 1, Id: 1}, nil) _hrm := NewHRMServiceService(nil, biz.NewConcurrentPostUsecase(repo, logger), nil, nil, nil, nil, logger) _hrm.QueryConcurrentPost(context.Background(), &amp;amp;v1.ReqConcurrentPostId{ UserId: uint64(1), Id: 1, }) repo.AssertExpectations(t) }) } mock sql，可以测试到service层，biz层和data层，但是具体sql并不能测试， 因为sql返回结果是mock的期望值。
func TestConcurrentPostWithSql(t *testing.T) { Convey(&amp;#34;unit testing concurrent_post query service&amp;#34;, t, func() { logger := log.</description>
    </item>
    
    <item>
      <title>gitlab ci/cd</title>
      <link>http://HimawariSunFlower.github.io/posts/cicd_1/</link>
      <pubDate>Tue, 11 Oct 2022 16:05:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/cicd_1/</guid>
      <description>官方文档
关于大仓模式微服务的ci/cd构建
cd应该针对master分支，也就是主分支代码提交时(发版时)才触发自动构建。 我们通常只想构建、测试和部署应用程序的那些已经更改的服务ーー而不是将所有服务放在一起，因为这可能非常耗时。使用only/change子句来实现。rule/changes应当是更好的实现。 根据gitlab官方的cicd实现，根目录的yml去include ci文件夹下的对应服务的yml文件，来实现一个大仓下多个服务的cicd。 todo 如何去发布到不同服务器？ 目前选用ansible todo k8s 踩坑：
jobs config should contain at least one visible job https://gitlab.com/gitlab-org/gitlab/-/issues/341693 疑似已修复，gitlab15.2 请注意，GitLab Runner 的默认 pull policy 为 always，这意味着即使本地副本可用，runner 也会尝试从 GitLab 容器镜像库中提取 Docker 镜像。如果您更喜欢仅使用本地可用的 Docker 镜像，则可以在离线环境中将 GitLab Runner pull_policy 设置为 if-not-present。但是，如果不在离线环境中，我们建议将拉取策略设置保持为 always，因为这样可以在 CI/CD 流水线中使用更新的扫描程序。 runner默认使用always策略，无法通过配置文件修改 protoc-gen-go: error:inconsistent package import paths protoc-gen-go不存在报的这个错误，神秘 每一个构建都是隔离的，build protos这种指令应当放到before_script里让每个stage都触发生成 only:-changes: 路径不能包含变量，直接从根目录指向对应目录 技巧
include template可以直接引用gitlab官方预制的一些模板，包括代码检查之类的。链接 gitlab提供了一批预定义变量. 链接 命令
dependencies: 通过提供要从中获取产物的作业列表，来限制将哪些产物传递给特定作业。也就是说在 deploy阶段dependencies指定build阶段的job可以取到build打出来的包。 tags:用于选择 runner 的标签列表（选取运行对象） needs：在 stage 顺序之前执行的作业（发动效果的cost） extends：此作业继承自的配置条目（有继承就可以抽象一些公用的方法出来了） artifacts：使用 artifacts 指定在作业 succeeds, fails, 或 always 时附加到作业的文件和目录列表。(根据artfacts在build，deploy两个阶段传递打出来的包) 参考文档</description>
    </item>
    
    <item>
      <title>uml</title>
      <link>http://HimawariSunFlower.github.io/posts/uml/</link>
      <pubDate>Sat, 08 Oct 2022 16:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/uml/</guid>
      <description>UML 是统一建模语言的简称，它是一种由一整套图表组成的标准化建模语言。
结构性图: 类图 (Class Diagram) 组件图 (Component Diagram) 部署图 (Deployment Diagram) 对象图 (Object Diagram) 包图 (Package Diagram) 复合结构图 (Composite Structure Diagram) 轮廓图 (Profile Diagram)
行为性图: 用例图 (Use Case Diagram) 活动图 (Activity Diagram) 状态机图 (State Machine Diagram) 序列图 (Sequence Diagram) 通訊圖 (Communication Diagram) 交互概述图 (Interaction Overview Diagram) 时序图 (Timing Diagram)</description>
    </item>
    
    <item>
      <title>go源码阅读之errgroup</title>
      <link>http://HimawariSunFlower.github.io/posts/go_1/</link>
      <pubDate>Wed, 28 Sep 2022 17:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/go_1/</guid>
      <description>阅读kratos源码发时候，发现在app.Run()方法里调用了一个叫errgroup的官方库(居然和singleflight一个库)。 决定去看一下这是个什么样的库，golang.org/x/sync/errgroup。
发现是官方对goroutines group的一个封装。
Package errgroup provides synchronization, error propagation, and Context cancelation for groups of goroutines working on subtasks of a common task. errgroup的结构：
type Group struct { cancel func() wg sync.WaitGroup sem chan token errOnce sync.Once err error } errgroup提供了以下方法：
func WithContext(ctx context.Context) (*Group, context.Context) func (g *Group) Go(f func() error) func (g *Group) SetLimit(n int) func (g *Group) TryGo(f func() error) bool func (g *Group) Wait() error withcontext是根据context去build一个errgroup，并返回从ctx派生的context。派生的Context在传递给Go的函数第一次返回非nil错误或Wait第一次返回时被取消，以先发生的情况为准。</description>
    </item>
    
    <item>
      <title>go1.16 docker build遇到的问题</title>
      <link>http://HimawariSunFlower.github.io/posts/go_sum/</link>
      <pubDate>Fri, 23 Sep 2022 14:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/go_sum/</guid>
      <description>在我本机能运行的Dockerfile，在同事机器上build步骤会失败
Dockerfile:
FROM golang:1.16 AS builder ARG APP_RELATIVE_PATH COPY . /src WORKDIR /src/app/${APP_RELATIVE_PATH} RUN GOPROXY=https://goproxy.cn make build FROM debian:stable-slim ARG APP_RELATIVE_PATH RUN apt-get update &amp;amp;&amp;amp; apt-get install -y --no-install-recommends \ ca-certificates \ netbase \ &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/ \ &amp;amp;&amp;amp; apt-get autoremove -y &amp;amp;&amp;amp; apt-get autoclean -y COPY --from=builder /src/app/${APP_RELATIVE_PATH}/bin /app WORKDIR /app EXPOSE 8000 EXPOSE 9000 VOLUME /data/conf CMD [&amp;#34;./server&amp;#34;, &amp;#34;-conf&amp;#34;, &amp;#34;/data/conf&amp;#34;] Makefile:
.PHONY: build # build build: mkdir -p bin/ &amp;amp;&amp;amp; go build -ldflags &amp;#34;-X main.</description>
    </item>
    
    <item>
      <title>docker 初体验</title>
      <link>http://HimawariSunFlower.github.io/posts/doceker_1/</link>
      <pubDate>Tue, 20 Sep 2022 11:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/doceker_1/</guid>
      <description> 传进去的配置文件 如果是监听端口，应当是0.0.0.0 如果是外部服务，应当是对应ip，无法直接用0.0.0.0去连接宿主机 Dockerfile docker 指令 volumes 挂在相对路径的话，根节点在dockerfile的文件或者docker-compose.yml的路径 🔗 cmd使用[]形式不能取到环境变量 更具体的原理 多步构建 copy会跟在run后面执行 </description>
    </item>
    
    <item>
      <title>go-kratos 实际开发问题</title>
      <link>http://HimawariSunFlower.github.io/posts/read_kratos_4/</link>
      <pubDate>Mon, 19 Sep 2022 11:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/read_kratos_4/</guid>
      <description>repo层抽象优化问题 https://lailin.xyz/post/graceful-repo-code.html 关于repo层的接口优雅，抽象 kratos的biz层，data层不太能处理？ gorm这种具体orm不应当暴露给biz biz不能调用data会相互引用 暂时没有思考出好的方式 ddd相关及kratos版ddd相关
与dart客户端的grpc对接
返回error 他那边是try catch到再用grpcError类解析处理，等同于go的grpc包里的toRpcErr() rpc分类：</description>
    </item>
    
    <item>
      <title>gorm 遇到的问题</title>
      <link>http://HimawariSunFlower.github.io/posts/gorm_1/</link>
      <pubDate>Mon, 19 Sep 2022 11:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/gorm_1/</guid>
      <description> updates(&amp;amp;struct{}),值为0不会跟新，需要updates(map)或者save()或者update() </description>
    </item>
    
    <item>
      <title>consul</title>
      <link>http://HimawariSunFlower.github.io/posts/consul/</link>
      <pubDate>Mon, 19 Sep 2022 10:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/consul/</guid>
      <description></description>
    </item>
    
    <item>
      <title>jaeger</title>
      <link>http://HimawariSunFlower.github.io/posts/jaeger/</link>
      <pubDate>Mon, 19 Sep 2022 10:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/jaeger/</guid>
      <description></description>
    </item>
    
    <item>
      <title>使用vue3&#43;typescript实现与后端的grpc通信</title>
      <link>http://HimawariSunFlower.github.io/posts/ts_1/</link>
      <pubDate>Mon, 19 Sep 2022 10:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/ts_1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>go-kratos 微服务必须的功能及第三方库</title>
      <link>http://HimawariSunFlower.github.io/posts/read_kratos_3/</link>
      <pubDate>Tue, 13 Sep 2022 15:08:57 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/read_kratos_3/</guid>
      <description>服务发现 consul
基于name和id来区分不同注册 如果name或id相同，会互相覆盖 链路追踪 jaeger
kratos的中间件通过[open-telemetry]集成数据再传递给jaeger Metrics open-telemetry + Grafana + Prometheus
&amp;hellip;更多待添加</description>
    </item>
    
    <item>
      <title>mac常用快捷键</title>
      <link>http://HimawariSunFlower.github.io/posts/mac_1/</link>
      <pubDate>Tue, 13 Sep 2022 11:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/mac_1/</guid>
      <description>通用
Home键=Fn+左方向 End键=Fn+右方向 PageUP=Fn+上方向 PageDOWN=Fn+下方向 终端
tab 完整的目录或文件名称 tab+tab 显示可能的目录或文件名称补全列表 command+D 双屏 shift+command+D 取消双屏 control+A 到行首 control+E 到行尾 control+U 行删除 command+home 到顶部 command+end 到底部 command+pageup 上一页 command+pagedown 下一页 goland
#部分是改建 command+z 撤消 control+T 重做 (撤消撤销) command+R 替换 shift+command+R 全局替换 command+f 搜索 shift+command+f 全局搜索 command+&amp;lt;- 到行首 command+-&amp;gt; 到行尾 shift+command+&amp;lt;- 选中到行首 shift+command+-&amp;gt; 选中到行尾 command+delete 行删除 option+command+l 格式化文件 option+shift+command+[ 从当前光标选中到代码块开始 (没选到最开始就多敲一下[) option+shift+command+] 从当前光标选中到代码块结束 chrome
mac 强制刷新：command+shift+r mac 普通刷新：command+r trem
pwd 当前路径 ps -ef | grep 进程名 查看进程号 sudo lsof -i :端口 查看端口被哪个进程监听 sudo lsof -nP -p 进程号 | grep LISTEN 查看进程监听的端口 sudo lsof -nP | grep LISTEN | grep 进程号 查看进程监听的端口 sudo lsof -nP | grep LISTEN | grep 端口号 查看监听端口的进程 linux</description>
    </item>
    
    <item>
      <title>go-kratos 模仿beershop的微服务demo运行及遇到的问题</title>
      <link>http://HimawariSunFlower.github.io/posts/read_kratos_2/</link>
      <pubDate>Mon, 05 Sep 2022 15:08:57 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/read_kratos_2/</guid>
      <description>错误如果不定义为kratos的错误类型，直接输出errors.error，会输出私有错误 { &amp;#34;errors&amp;#34;: { &amp;#34;internal&amp;#34;: [ &amp;#34;error&amp;#34; ] } } 无法显示具体信息，必须按规定的错误处理，定义生成pb文件之后包装一下
v1.ErrorParamError(&amp;#34;jwt token missing&amp;#34;) v1.ErrorParamError(err.Error()) 尝试docker部署微服务，docker build 报错 failed to solve with frontend dockerfile.v0: failed to create LLB definition: unexpected status code [manifests stable-slim]: 403 Forbidden 设置 docker Engine =&amp;gt; features:{buildkit:false}
docker 里是不能用127.0.0.1访问宿主机的数据库的，需要配置里配宿主机ip
root只能localhost访问，需要创建新用户, % 表示任意ip都能访问 dokerfile 里的make build执行的就是makefile里的build命令，需要改指向的cmd路径 可以用这个指令 docker run -it &amp;lt;image:version&amp;gt; bash
去排查docker运行时的问题 casbin中间件 取不到req的mehod 只有ctx和一个interface的req Request Method func(handler middleware.Handler) middleware.Handler { return func(ctx context.Context, req interface{}) (interface{}, error) { tr, _ := transport.</description>
    </item>
    
    <item>
      <title>gframe 框架源码阅读1</title>
      <link>http://HimawariSunFlower.github.io/posts/read_gf_1/</link>
      <pubDate>Tue, 30 Aug 2022 16:21:14 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/read_gf_1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>go-kratos 初体验</title>
      <link>http://HimawariSunFlower.github.io/posts/read_kratos_1/</link>
      <pubDate>Tue, 30 Aug 2022 16:21:14 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/read_kratos_1/</guid>
      <description>#动手之前需要理清楚微服务逻辑
1.wire生成出来的wire_gen.go，goland同包读取不到，飘红。(实际编译成功了)
:插件中卸载 go wire util 就好了
2.proto文件，import &amp;ldquo;google/api/annotations.proto&amp;rdquo; 等应用飘红。
:在goland设置的protobuf里添加third_party,
belike: 3.项目结构
├── Dockerfile ├── LICENSE ├── Makefile ├── README.md ├── api // 下面维护了微服务使用的proto文件以及根据它们所生成的go文件 │ └── helloworld │ └── v1 │ ├── error_reason.pb.go │ ├── error_reason.proto │ ├── error_reason.swagger.json │ ├── greeter.pb.go │ ├── greeter.proto │ ├── greeter.swagger.json │ ├── greeter_grpc.pb.go │ └── greeter_http.pb.go ├── cmd // 整个项目启动的入口文件 │ └── server │ ├── main.go │ ├── wire.go // 我们使用wire来维护依赖注入 │ └── wire_gen.</description>
    </item>
    
    <item>
      <title>上传github,ssh报错及解决方法</title>
      <link>http://HimawariSunFlower.github.io/posts/first_post/</link>
      <pubDate>Tue, 30 Aug 2022 11:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/first_post/</guid>
      <description>上传github报错
ssh: Could not resolve hostname github.com:HimawariSunFlower: nodename nor servname provided, or not known fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists 首先怀疑是公司gitlab账户覆盖掉github账户
ssh-add -l 确实没发现github的密钥
ssh -T git@github.com是通的，ping不通
尝试方法1 hosts修改去可以ping通，没有用
尝试方法2 添加多个账户，添加到ssh-add，没有用，方法2延伸问题，ssh passphrase忘记，mac钥匙串可以找回
最终解决方法 dns冲洗
#Other ways to flush your dns, in windows in your terminal ipconfig /flushdns #on macos dscacheutil -flushcache #on linux service nscd restart </description>
    </item>
    
  </channel>
</rss>
