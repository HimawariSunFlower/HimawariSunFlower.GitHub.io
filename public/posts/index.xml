<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on HimawariSunFlower&#39;s home</title>
    <link>http://HimawariSunFlower.github.io/posts/</link>
    <description>Recent content in Posts on HimawariSunFlower&#39;s home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 08 Oct 2022 16:11:27 +0800</lastBuildDate><atom:link href="http://HimawariSunFlower.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>uml</title>
      <link>http://HimawariSunFlower.github.io/posts/uml/</link>
      <pubDate>Sat, 08 Oct 2022 16:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/uml/</guid>
      <description>UML 是统一建模语言的简称，它是一种由一整套图表组成的标准化建模语言。
结构性图: 类图 (Class Diagram) 组件图 (Component Diagram) 部署图 (Deployment Diagram) 对象图 (Object Diagram) 包图 (Package Diagram) 复合结构图 (Composite Structure Diagram) 轮廓图 (Profile Diagram)
行为性图: 用例图 (Use Case Diagram) 活动图 (Activity Diagram) 状态机图 (State Machine Diagram) 序列图 (Sequence Diagram) 通訊圖 (Communication Diagram) 交互概述图 (Interaction Overview Diagram) 时序图 (Timing Diagram)</description>
    </item>
    
    <item>
      <title>go源码阅读之errgroup</title>
      <link>http://HimawariSunFlower.github.io/posts/go_1/</link>
      <pubDate>Wed, 28 Sep 2022 17:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/go_1/</guid>
      <description>阅读kratos源码发时候，发现在app.Run()方法里调用了一个叫errgroup的官方库(居然和singleflight一个库)。 决定去看一下这是个什么样的库，golang.org/x/sync/errgroup。
发现是官方对goroutines group的一个封装。
Package errgroup provides synchronization, error propagation, and Context cancelation for groups of goroutines working on subtasks of a common task. errgroup的结构：
type Group struct { cancel func() wg sync.WaitGroup sem chan token errOnce sync.Once err error } errgroup提供了以下方法：
func WithContext(ctx context.Context) (*Group, context.Context) func (g *Group) Go(f func() error) func (g *Group) SetLimit(n int) func (g *Group) TryGo(f func() error) bool func (g *Group) Wait() error withcontext是根据context去build一个errgroup，并返回从ctx派生的context。派生的Context在传递给Go的函数第一次返回非nil错误或Wait第一次返回时被取消，以先发生的情况为准。</description>
    </item>
    
    <item>
      <title>go1.16 docker build遇到的问题</title>
      <link>http://HimawariSunFlower.github.io/posts/go_sum/</link>
      <pubDate>Fri, 23 Sep 2022 14:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/go_sum/</guid>
      <description>在我本机能运行的Dockerfile，在同事机器上build步骤会失败
Dockerfile:
FROM golang:1.16 AS builder ARG APP_RELATIVE_PATH COPY . /src WORKDIR /src/app/${APP_RELATIVE_PATH} RUN GOPROXY=https://goproxy.cn make build FROM debian:stable-slim ARG APP_RELATIVE_PATH RUN apt-get update &amp;amp;&amp;amp; apt-get install -y --no-install-recommends \ ca-certificates \ netbase \ &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/ \ &amp;amp;&amp;amp; apt-get autoremove -y &amp;amp;&amp;amp; apt-get autoclean -y COPY --from=builder /src/app/${APP_RELATIVE_PATH}/bin /app WORKDIR /app EXPOSE 8000 EXPOSE 9000 VOLUME /data/conf CMD [&amp;#34;./server&amp;#34;, &amp;#34;-conf&amp;#34;, &amp;#34;/data/conf&amp;#34;] Makefile:
.PHONY: build # build build: mkdir -p bin/ &amp;amp;&amp;amp; go build -ldflags &amp;#34;-X main.</description>
    </item>
    
    <item>
      <title>docker 初体验</title>
      <link>http://HimawariSunFlower.github.io/posts/doceker_1/</link>
      <pubDate>Tue, 20 Sep 2022 11:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/doceker_1/</guid>
      <description>1.传进去的配置文件 如果是监听端口，应当是0.0.0.0 如果是外部服务，应当是对应ip，无法直接用0.0.0.0去连接宿主机
2.Dockerfile
3.docker 指令</description>
    </item>
    
    <item>
      <title>go-kratos 实际开发问题</title>
      <link>http://HimawariSunFlower.github.io/posts/read_kratos_4/</link>
      <pubDate>Mon, 19 Sep 2022 11:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/read_kratos_4/</guid>
      <description>repo层抽象优化问题 https://lailin.xyz/post/graceful-repo-code.html 关于repo层的接口优雅，抽象 kratos的biz层，data层不太能处理？ gorm这种具体orm不应当暴露给biz biz不能调用data会相互引用 暂时没有思考出好的方式 ddd相关及kratos版ddd相关
与dart客户端的grpc对接
返回error 他那边是try catch到再用grpcError类解析处理，等同于go的grpc包里的toRpcErr() rpc分类：</description>
    </item>
    
    <item>
      <title>gorm 遇到的问题</title>
      <link>http://HimawariSunFlower.github.io/posts/gorm_1/</link>
      <pubDate>Mon, 19 Sep 2022 11:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/gorm_1/</guid>
      <description> updates(&amp;amp;struct{}),值为0不会跟新，需要updates(map)或者save()或者update() </description>
    </item>
    
    <item>
      <title>go-kratos 微服务必须的功能及第三方库</title>
      <link>http://HimawariSunFlower.github.io/posts/read_kratos_3/</link>
      <pubDate>Tue, 13 Sep 2022 15:08:57 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/read_kratos_3/</guid>
      <description>服务发现 consul
基于name和id来区分不同注册 如果name或id相同，会互相覆盖 链路追踪 jaeger
kratos的中间件通过[open-telemetry]集成数据再传递给jaeger Metrics open-telemetry + Grafana + Prometheus
&amp;hellip;更多待添加</description>
    </item>
    
    <item>
      <title>mac常用快捷键</title>
      <link>http://HimawariSunFlower.github.io/posts/mac_1/</link>
      <pubDate>Tue, 13 Sep 2022 11:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/mac_1/</guid>
      <description>通用
Home键=Fn+左方向 End键=Fn+右方向 PageUP=Fn+上方向 PageDOWN=Fn+下方向 终端
tab 完整的目录或文件名称 tab+tab 显示可能的目录或文件名称补全列表 command+D 双屏 shift+command+D 取消双屏 control+A 到行首 control+E 到行尾 control+U 行删除 command+home 到顶部 command+end 到底部 command+pageup 上一页 command+pagedown 下一页 goland
#部分是改建 command+z 撤消 control+T 重做 (撤消撤销) command+R 替换 shift+command+R 全局替换 command+f 搜索 shift+command+f 全局搜索 command+&amp;lt;- 到行首 command+-&amp;gt; 到行尾 shift+command+&amp;lt;- 选中到行首 shift+command+-&amp;gt; 选中到行尾 command+delete 行删除 option+command+l 格式化文件 trem
pwd 当前路径 ps -ef | grep 进程名 查看进程号 sudo lsof -i :端口 查看端口被哪个进程监听 sudo lsof -nP -p 进程号 | grep LISTEN 查看进程监听的端口 sudo lsof -nP | grep LISTEN | grep 进程号 查看进程监听的端口 sudo lsof -nP | grep LISTEN | grep 端口号 查看监听端口的进程 </description>
    </item>
    
    <item>
      <title>go-kratos 模仿beershop的微服务demo运行及遇到的问题</title>
      <link>http://HimawariSunFlower.github.io/posts/read_kratos_2/</link>
      <pubDate>Mon, 05 Sep 2022 15:08:57 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/read_kratos_2/</guid>
      <description>错误如果不定义为kratos的错误类型，直接输出errors.error，会输出私有错误 { &amp;#34;errors&amp;#34;: { &amp;#34;internal&amp;#34;: [ &amp;#34;error&amp;#34; ] } } 无法显示具体信息，必须按规定的错误处理，定义生成pb文件之后包装一下
v1.ErrorParamError(&amp;#34;jwt token missing&amp;#34;) v1.ErrorParamError(err.Error()) 尝试docker部署微服务，docker build 报错 failed to solve with frontend dockerfile.v0: failed to create LLB definition: unexpected status code [manifests stable-slim]: 403 Forbidden 设置 docker Engine =&amp;gt; features:{buildkit:false}
docker 里是不能用127.0.0.1访问宿主机的数据库的，需要配置里配宿主机ip
root只能localhost访问，需要创建新用户, % 表示任意ip都能访问 dokerfile 里的make build执行的就是makefile里的build命令，需要改指向的cmd路径 可以用这个指令 docker run -it &amp;lt;image:version&amp;gt; bash
去排查docker运行时的问题 casbin中间件 取不到req的mehod 只有ctx和一个interface的req Request Method func(handler middleware.Handler) middleware.Handler { return func(ctx context.Context, req interface{}) (interface{}, error) { tr, _ := transport.</description>
    </item>
    
    <item>
      <title>gframe 框架源码阅读1</title>
      <link>http://HimawariSunFlower.github.io/posts/read_gf_1/</link>
      <pubDate>Tue, 30 Aug 2022 16:21:14 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/read_gf_1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>go-kratos 初体验</title>
      <link>http://HimawariSunFlower.github.io/posts/read_kratos_1/</link>
      <pubDate>Tue, 30 Aug 2022 16:21:14 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/read_kratos_1/</guid>
      <description>#动手之前需要理清楚微服务逻辑
1.wire生成出来的wire_gen.go，goland同包读取不到，飘红。(实际编译成功了)
:插件中卸载 go wire util 就好了
2.proto文件，import &amp;ldquo;google/api/annotations.proto&amp;rdquo; 等应用飘红。
:在goland设置的protobuf里添加third_party,
belike: 3.项目结构
├── Dockerfile ├── LICENSE ├── Makefile ├── README.md ├── api // 下面维护了微服务使用的proto文件以及根据它们所生成的go文件 │ └── helloworld │ └── v1 │ ├── error_reason.pb.go │ ├── error_reason.proto │ ├── error_reason.swagger.json │ ├── greeter.pb.go │ ├── greeter.proto │ ├── greeter.swagger.json │ ├── greeter_grpc.pb.go │ └── greeter_http.pb.go ├── cmd // 整个项目启动的入口文件 │ └── server │ ├── main.go │ ├── wire.go // 我们使用wire来维护依赖注入 │ └── wire_gen.</description>
    </item>
    
    <item>
      <title>上传github,ssh报错及解决方法</title>
      <link>http://HimawariSunFlower.github.io/posts/first_post/</link>
      <pubDate>Tue, 30 Aug 2022 11:11:27 +0800</pubDate>
      
      <guid>http://HimawariSunFlower.github.io/posts/first_post/</guid>
      <description>上传github报错
ssh: Could not resolve hostname github.com:HimawariSunFlower: nodename nor servname provided, or not known fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists 首先怀疑是公司gitlab账户覆盖掉github账户
ssh-add -l 确实没发现github的密钥
ssh -T git@github.com是通的，ping不通
尝试方法1 hosts修改去可以ping通，没有用
尝试方法2 添加多个账户，添加到ssh-add，没有用，方法2延伸问题，ssh passphrase忘记，mac钥匙串可以找回
最终解决方法 dns冲洗
#Other ways to flush your dns, in windows in your terminal ipconfig /flushdns #on macos dscacheutil -flushcache #on linux service nscd restart </description>
    </item>
    
  </channel>
</rss>
